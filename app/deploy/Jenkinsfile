pipeline {
   agent {
       kubernetes {
         defaultContainer 'golang'
         yaml """
metadata:
  labels:
    some-label: some-label-value
    class: KubernetesDeclarativeAgentTest
spec:
  containers:
  - name: golang
    image: golang
    command:
    - cat
    tty: true
  - name: ansible
    image: amioranza/ansible:v2.5
    command:
    - cat
    tty: true
"""
       }
   }
   environment {
       registry = "registry.setrem.mdcnet.ninja/root/app"
       GOCACHE = "/tmp"
   }
   stages {
       stage('Build') {
           steps {
               container('golang') {
                   // Create our project directory.
                   sh 'cd ${GOPATH}/src'
                   sh 'mkdir -p ${GOPATH}/src/hello-world'
                   // Copy all files in our Jenkins workspace to our project directory.
                   sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/hello-world'
                   // Build the app.
                   sh 'go build'
               }
           }
       }
       stage('Test') {
           steps {
               container ('golang') {
                   // Create our project directory.
                   sh 'cd ${GOPATH}/src'
                   sh 'mkdir -p ${GOPATH}/src/hello-world'
                   // Copy all files in our Jenkins workspace to our project directory.
                   sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/hello-world'
                   // Remove cached test results.
                   sh 'go clean -cache'
                   // Run Unit Tests.
                   sh 'go test ./... -v -short'
               }
           }
       }
       stage('Publish') {
           environment {
               registryCredential = 'registry'
           }
           steps{
               script {
                   def appimage = docker.build registry + ":$BUILD_NUMBER"
                   docker.withRegistry( '', registryCredential ) {
                       appimage.push()
                       appimage.push('latest')
                   }
               }
           }
       }
       stage ('Deploy') {
           steps {
             container ('ansible') {
               script{
                   def image_id = registry + ":$BUILD_NUMBER"
                   sh "ansible-playbook  deploy/playbook.yml --extra-vars \"image_id=${image_id}\""
               }
             }
           }
       }
   }
}